1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "mcp-trino.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "mcp-trino.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "mcp-trino.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "{{- include "mcp-trino.selectorLabels" . | nindent 4 }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:{{ .Values.service.port }} to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME {{ .Values.service.port }}:$CONTAINER_PORT
{{- end }}

2. MCP Server Configuration:
   - Transport: {{ .Values.mcpServer.transport }}
   - Host: {{ .Values.mcpServer.host }}
   - Port: {{ .Values.mcpServer.port }}

3. Trino Connection:
   - Host: {{ .Values.trino.host }}
   - Port: {{ .Values.trino.port }}
   - User: {{ .Values.trino.user }}
   - Catalog: {{ .Values.trino.catalog }}
   - Schema: {{ .Values.trino.schema }}
   {{- if .Values.trino.oauth.enabled }}
   - OAuth Enabled: {{ .Values.trino.oauth.enabled }}
   - OAuth Provider: {{ .Values.trino.oauth.provider }}
   {{- end }}

4. Available MCP Tools:
   - execute_query: Execute SQL queries with security restrictions
   - list_catalogs: Discover available data catalogs
   - list_schemas: List schemas within catalogs
   - list_tables: List tables within schemas
   - get_table_schema: Retrieve table structure

5. Security Notes:
   - Write queries are {{ if .Values.trino.allowWriteQueries }}ENABLED{{ else }}DISABLED{{ end }}
   - Pod runs as non-root user ({{ .Values.securityContext.runAsUser }})
   - Read-only root filesystem enabled

{{- if .Values.eks.serviceAccount.annotations }}
6. AWS EKS Integration:
   - IRSA Role: {{ index .Values.eks.serviceAccount.annotations "eks.amazonaws.com/role-arn" | default "Not configured" }}
{{- end }}

For more information, visit: https://github.com/tuannvm/mcp-trino